/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package podmamanagement;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jdk.nashorn.internal.runtime.regexp.joni.exception.JOniException;

/**
 *
 * @author millat
 */
public class AddClientInGroupFrame extends javax.swing.JFrame {

    /**
     * Creates new form AddClientInGroupFrame
     */
    public AddClientInGroupFrame() {
        initComponents();
        GroupInComboBox();
       changingGroupsExistingMembers();
        changetable();
        
    }
    public void InputInGroup(String Client_id,String ClientName){
        
        lclientId.setText(Client_id);
        lclientName.setText(ClientName);
       
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CbGrade = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GroupTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        AddgroupButton = new javax.swing.JButton();
        GroupComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        tfItemName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfItemPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfNumberOfIsntallments = new javax.swing.JTextField();
        AddClientGMessage = new javax.swing.JLabel();
        bCancel = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        TotalInvestMent = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lclientId = new javax.swing.JLabel();
        lclientName = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Client ID :");

        jLabel2.setText("Client Name :");

        CbGrade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D" }));
        CbGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbGradeActionPerformed(evt);
            }
        });

        jLabel14.setText("Grade");

        GroupTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Grade", "Group Name", "Group Size", "Existing Members", "Available for new members"
            }
        ));
        GroupTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GroupTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(GroupTable);

        jLabel3.setText("Group Name :");

        AddgroupButton.setText("Done");
        AddgroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddgroupButtonActionPerformed(evt);
            }
        });

        GroupComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Item Name:");

        tfItemName.setText(" ");

        jLabel5.setText("Item Price:");

        tfItemPrice.setText(" ");

        jLabel6.setText("Numbrt of istallments:");

        tfNumberOfIsntallments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNumberOfIsntallmentsActionPerformed(evt);
            }
        });

        bCancel.setText("Cancel");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        jLabel7.setText("Total Investment :");

        TotalInvestMent.setText("total is 0");

        jLabel8.setText("Date :");

        jLabel9.setText("TK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddgroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(bCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddClientGMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel14)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(51, 51, 51)))
                                .addGap(22, 22, 22))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(91, 91, 91)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tfItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(GroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CbGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfNumberOfIsntallments, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lclientId, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                            .addComponent(lclientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(17, 17, 17))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(TotalInvestMent, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TotalInvestMent, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(lclientId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(lclientName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(CbGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(GroupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfNumberOfIsntallments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                .addComponent(AddClientGMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddgroupButton)
                    .addComponent(bCancel))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddgroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddgroupButtonActionPerformed

        int Confirm = JOptionPane.showConfirmDialog(null, "Is everything ok?", "Confirmation", JOptionPane.YES_NO_OPTION);
           if(Confirm == 0){
        
        try {
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);

            Connection conn = DriverManager.getConnection(myUrl, "test", "test");
            
            // Here we are finding duplicate id in a group
            String  ClientGroupName = GroupComboBox.getSelectedItem().toString();
            System.out.println(ClientGroupName);
            String  SearchDublicateId="select count(Client_Id) from grouptablewithclientitems where Group_Name='"+ClientGroupName+"'";
            PreparedStatement chk = conn.prepareStatement(SearchDublicateId);
            ResultSet rs = chk.executeQuery();
            rs.next();
            iDcount = 0;
            iDcount = rs.getInt(1);
            
            System.out.println("count="+iDcount);
            if(iDcount>=1){
                JOptionPane.showMessageDialog(null, "This customer is already exists in this group!");
            }else{
                
                
                //.....checknig if there is enough space for a new members..... 
                
                if(AnyEmptySlot() == 0){
                   JOptionPane.showMessageDialog(null, "Group is full");
                }
                
                
                //.....End of checking........
                
                
                
                
                else{
            
            
            String query = "insert into grouptablewithclientitems (Client_Id,Client_Name,Grade,Group_Name,Item_Name,Item_Price,"
                          + "Number_Of_Installments,DateAndTime)"+"values(?,?,?,?,?,?,?,?)";
            
            
            
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            preparedStmnt.setString(1, lclientId.getText());
            preparedStmnt.setString(2, lclientName.getText());
            preparedStmnt.setString(3,CbGrade.getSelectedItem().toString() );
            preparedStmnt.setString(4, GroupComboBox.getSelectedItem().toString());   
            preparedStmnt.setString(5, tfItemName.getText());
            
            String ItemPrice = tfItemPrice.getText();   
            preparedStmnt.setDouble(6,Double.parseDouble(ItemPrice) );
            preparedStmnt.setString(7, tfNumberOfIsntallments.getText());
            preparedStmnt.setString(8, InstallmentDatePicker.getDate().toString());
           
            preparedStmnt.execute();
        
            AddClientGMessage.setText("Added ..!!");
        
            }//finishing of else ........
            
            //........when new member added in a group the databases and table are updated instantly...........
            //.....first changing the database......
            changingGroupsExistingMembers();
            //.......second the table in the jframe because it is taking value from the changed databases.....
            
            
            changetable();
            
            
            //This Block is to calculate the Existing Size of Member in a group and it works with done button...
            
        
            
            
           
            }
           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
       
        }          
           } 
        
    }//GEN-LAST:event_AddgroupButtonActionPerformed

    
    
    
    private void GroupTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GroupTableMouseClicked
        // TODO add your handling code here:
       
        
    }//GEN-LAST:event_GroupTableMouseClicked

    
    
    private void changingGroupsExistingMembers(){
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            
            String How_Many_Members_query = "select Group_Name from grouptablewithclientitems where Group_Name ='"+group_Name+"'";                              
            PreparedStatement pstCheck = conn.prepareStatement(How_Many_Members_query);
            ResultSet result = pstCheck.executeQuery();
            System.out.println("ok");
            while(result.next()){
               check++;           
           }
            // ........a method was created to check the group sizes & here we are calling it..................                       
                 Size = GroupSize();
                 AvailableMembers = Size - check;

            
            
            
            
            String grade = CbGrade.getSelectedItem().toString();
            String group = GroupComboBox.getSelectedItem().toString();
            String AvailableMem = Integer.toString(AvailableMembers);
            if(grade.equals("A")){                                     
                String Size_in_String = Integer.toString(check);
                String Update_ExistingMembers_Query  = "UPDATE gradea SET Existing_member = '"+Size_in_String+"',Available_Member = '"+AvailableMem+"' WHERE Group_Name = '"+group+"'";
                PreparedStatement pstUpdateA = conn.prepareStatement(Update_ExistingMembers_Query);
                pstUpdateA.execute();
                
            
            }
            else if(grade.equals("B")){
                String Size_in_String = Integer.toString(check);
                String Update_ExistingMembers_Query  = "UPDATE gradeb SET Existing_member = '"+Size_in_String+"',Available_Member = '"+AvailableMem+"' WHERE Group_Name = '"+group+"'";
                        
                PreparedStatement pstUpdateB = conn.prepareStatement(Update_ExistingMembers_Query);
                pstUpdateB.execute();
                
            
            }
            else if(grade.equals("C")){
                String Size_in_String = Integer.toString(check);
                String Update_ExistingMembers_Query  = "UPDATE gradec SET Existing_member = '"+Size_in_String+"',Available_Member = '"+AvailableMem+"' WHERE Group_Name = '"+group+"'";
                PreparedStatement pstUpdateC = conn.prepareStatement(Update_ExistingMembers_Query);
                pstUpdateC.execute();
            
            }
            else if(grade.equals("D")) {
                String Size_in_String = Integer.toString(check);
               String Update_ExistingMembers_Query  = "UPDATE graded SET Existing_member = '"+Size_in_String+"',Available_Member = '"+AvailableMem+"' WHERE Group_Name = '"+group+"'";
                PreparedStatement pstUpdateD = conn.prepareStatement(Update_ExistingMembers_Query);
                pstUpdateD.execute();
            
            }
            
            
            
            
        }catch(Exception e){
            System.out.println(e);
        }
    } 
    
    
    private void GroupComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupComboBoxActionPerformed
        
        
    }//GEN-LAST:event_GroupComboBoxActionPerformed

    // This Method is for Finding Existing Member In the Groups And it is calling in the Done Button of 
    //AddClientInGroupFrame Class
    
    private void ShowTableInFrame(){
         DefaultTableModel model = (DefaultTableModel) GroupTable.getModel();
         model.getDataVector().removeAllElements();
         model.fireTableDataChanged(); 
         grade= CbGrade.getSelectedItem().toString();
         String Available = Integer.toString(AvailableMembers);
         model.addRow(new Object[]{
                grade,
                group_Name,
                Size,
                check,
                Available                      


            });
    }
    private void tfNumberOfIsntallmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNumberOfIsntallmentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNumberOfIsntallmentsActionPerformed

    private void CbGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbGradeActionPerformed
        // importing different group names from  diffent grase
        String x = CbGrade.getSelectedItem().toString();
        if(x.equals("A")){
        try{
            
            DefaultTableModel model = (DefaultTableModel) GroupTable.getModel();
            model.getDataVector().removeAllElements();
            GroupComboBox.removeAllItems();
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String query = "select * from gradea";
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            ResultSet result = preparedStmnt.executeQuery();
            
            //....always refresh member changed before refreshing table.....
            changingGroupsExistingMembers();
            
            //....refreshing the table....
           // changetable();
            
            
            
            
            
            while(result.next()){
            
                String group = result.getString("Group_Name");
                GroupComboBox.addItem(group);
            }
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        }
        if(x.equals("B")){
        try{
            DefaultTableModel model = (DefaultTableModel) GroupTable.getModel();
            model.getDataVector().removeAllElements();
             GroupComboBox.removeAllItems();
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String query = "select * from gradeb";
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            ResultSet result = preparedStmnt.executeQuery();
            
            
            
            while(result.next()){
            
                String group = result.getString("Group_Name");
                GroupComboBox.addItem(group);
            }
             //....always refresh member changed before refreshing table.....
            changingGroupsExistingMembers();
            
             //....refreshing the table....
            //changetable();
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        }
        if(x.equals("C")){
        try{
            DefaultTableModel model = (DefaultTableModel) GroupTable.getModel();
            model.getDataVector().removeAllElements();
            GroupComboBox.removeAllItems();
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String query = "select * from gradec";
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            ResultSet result = preparedStmnt.executeQuery();
            
            while(result.next()){
            
                String group = result.getString("Group_Name");
                GroupComboBox.addItem(group);
                System.out.println("c is printesd");
            }
             //....always refresh member changed before refreshing table.....
            changingGroupsExistingMembers();
             //....refreshing the table....
           // changetable();
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        }
        if(x.equals("D")){
        try{
            DefaultTableModel model = (DefaultTableModel) GroupTable.getModel();
            model.getDataVector().removeAllElements();
            GroupComboBox.removeAllItems();
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String query = "select * from graded";
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            ResultSet result = preparedStmnt.executeQuery();
       
             //clearing the table when the grade is 
            
            while(result.next()){
            
                String group = result.getString("Group_Name");
                GroupComboBox.addItem(group);
            }
             //....always refresh member changed before refreshing table.....
            changingGroupsExistingMembers();
             //....refreshing the table....
            //changetable();
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println(e);
        
        }
       
        }
        changetable();
    }//GEN-LAST:event_CbGradeActionPerformed

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        
        close();
    }//GEN-LAST:event_bCancelActionPerformed

    //........................changing the table to show the group changes of members in the jtable.......
    
    private void changetable(){
        try{
            group_Name = GroupComboBox.getSelectedItem().toString();
            
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            Connection conn = DriverManager.getConnection(myUrl,"test", "test"); 
           
           
          
          if(CbGrade.getSelectedItem().toString().equals("A")){
                DefaultTableModel model = (DefaultTableModel) GroupTable.getModel(); 
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged();
                String query = "select * from gradea";
                PreparedStatement preparedStmnt = conn.prepareStatement(query);
                ResultSet result = preparedStmnt.executeQuery();
                
                //printing group names in the table
                
                while(result.next()){
                     
                     
                     model.addRow(new Object[]{
                         "A" ,
                         result.getString("Group_Name"),
                         result.getString("Group_Member"),                 
                         result.getString("Existing_member"),
                         result.getString("Available_Member")
                                           
                     });
                                    
                }
                
                //This is for showing the total InvestMent in a group................................................
                String InvestMentQuery ="SELECT sum(`Item_Price`) as total FROM `grouptablewithclientitems` WHERE `Group_Name` = '"+group_Name+"' ";
                PreparedStatement pred = conn.prepareStatement(InvestMentQuery);
                ResultSet rs =pred.executeQuery();
                while(rs.next()){
                TotalInvestMent.setText(rs.getString("total"));
                
                while(rs.next()){
                        TotalInvestMent.setText(rs.getString("total"));
                        InvTotal =rs.getString("total");
                        
                    }
                if(Integer.parseInt(InvTotal)>=200000){
                    JOptionPane.showMessageDialog(null, "Investment must be less than 200000");
                    System.out.println("Helllllllllo");
                            
                    }
                      System.out.println("kkkkkkkkkkkkkkkkkkkk");
           }
                
                            
                      
            }
          if(CbGrade.getSelectedItem().toString().equals("B")){
                DefaultTableModel model = (DefaultTableModel) GroupTable.getModel(); 
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged();
              
                
                String query = "select * from gradeb";
                PreparedStatement preparedStmnt = conn.prepareStatement(query);
                ResultSet result = preparedStmnt.executeQuery();
                
                //printing group names in the table
                
                while(result.next()){
                     
                     
                     model.addRow(new Object[]{
                         "B" ,
                         result.getString("Group_Name"),
                         result.getString("Group_Member"),                 
                         result.getString("Existing_member"),
                         result.getString("Available_Member")
                                           
                     });
                                    
                }
                //This is for showing the total InvestMent in a group................................................
                String InvestMentQuery ="SELECT sum(`Item_Price`) as total FROM `grouptablewithclientitems` WHERE `Group_Name` = '"+group_Name+"' ";
                PreparedStatement pred = conn.prepareStatement(InvestMentQuery);
                ResultSet rs =pred.executeQuery();
                    while(rs.next()){
                        TotalInvestMent.setText(rs.getString("total"));
                        InvTotal =rs.getString("total");
                        if(Integer.parseInt(InvTotal)>300000){
                            JOptionPane.showMessageDialog(null, "Investment must be less than 300000");
                        }
                    }
                            
                      
            }
          if(CbGrade.getSelectedItem().toString().equals("C")){
                DefaultTableModel model = (DefaultTableModel) GroupTable.getModel(); 
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged();
                
                String query = "select * from gradec";
                PreparedStatement preparedStmnt = conn.prepareStatement(query);
                ResultSet result = preparedStmnt.executeQuery();
                
                //printing group names in the table
                
                while(result.next()){
                     
                     
                     model.addRow(new Object[]{
                         "C" ,
                         result.getString("Group_Name"),
                         result.getString("Group_Member"),                 
                         result.getString("Existing_member"),
                         result.getString("Available_Member")
                                           
                     });
                                    
                }
                //This is for showing the total InvestMent in a group................................................
                String InvestMentQuery ="SELECT sum(`Item_Price`) as total FROM `grouptablewithclientitems` WHERE `Group_Name` = '"+group_Name+"' ";
                PreparedStatement pred = conn.prepareStatement(InvestMentQuery);
                ResultSet rs =pred.executeQuery();
                    while(rs.next()){
                    TotalInvestMent.setText(rs.getString("total"));
                    InvTotal =rs.getString("total");
                        if(Integer.parseInt(InvTotal)>300000){
                            JOptionPane.showMessageDialog(null, "Investment must be less than 300000");
                        }
                    }
                            
                      
            }
          if(CbGrade.getSelectedItem().toString().equals("D")){
               DefaultTableModel model = (DefaultTableModel) GroupTable.getModel(); 
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged();
                
                String query = "select * from graded";
                PreparedStatement preparedStmnt = conn.prepareStatement(query);
                ResultSet result = preparedStmnt.executeQuery();
                
                //printing group names in the table
                
                while(result.next()){
                     
                     
                     model.addRow(new Object[]{
                         "D" ,
                         result.getString("Group_Name"),
                         result.getString("Group_Member"),                 
                         result.getString("Existing_member"),
                         result.getString("Available_Member")
                                           
                     });
                                    
                }
                //This is for showing the total InvestMent in a group................................................
                String InvestMentQuery ="SELECT sum(`Item_Price`) as total FROM `grouptablewithclientitems` WHERE `Group_Name` = '"+group_Name+"' ";
                PreparedStatement pred = conn.prepareStatement(InvestMentQuery);
                ResultSet rs =pred.executeQuery();
                while(rs.next()){
                TotalInvestMent.setText(rs.getString("total"));
                InvTotal =rs.getString("total");
                        if(Integer.parseInt(InvTotal)>300000){
                            JOptionPane.showMessageDialog(null, "Investment must be less than 300000");
                        }
                 }
                            
                      
            }
            
            conn.close();
        }catch(Exception e){
            System.out.println(e);
        }
    
    }
    
    
    
    
    //take Group from database to combobox
    
    private void GroupInComboBox(){
       try{
            GroupComboBox.removeAllItems();
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String query = "select * from gradea";
            PreparedStatement preparedStmnt = conn.prepareStatement(query);
            ResultSet result = preparedStmnt.executeQuery();
            
            while(result.next()){
            
                String group = result.getString("Group_Name");
                GroupComboBox.addItem(group);
            }
        
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        
       }
    
    }
    
    
    //......Checknig if the group is completely full......
    
     private int  AnyEmptySlot(){
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            String myUrl = "jdbc:mysql://localhost:3306/RudoDatabase";
            Class.forName(myDriver);
            
            Connection conn = DriverManager.getConnection(myUrl,"test", "test");
            String How_Many_Members_query = "select Group_Name from grouptablewithclientitems where Group_Name ='"+group_Name+"'";                              
            PreparedStatement pstCheck = conn.prepareStatement(How_Many_Members_query);
            ResultSet result = pstCheck.executeQuery();
            System.out.println("ok");
            while(result.next()){
               check++;           
           }
            // ........a method was created to check the group sizes & here we are calling it..................                       
                 Size = GroupSize();
                 AvailableMembers = Size - check;
                 
                 if(AvailableMembers <= 0){ 
                 value = 0;      
        }else
                 value = 1;

        }catch(Exception e){
            System.out.println(e);
        }
        
        return value;
    
    }
    
    
    public void close(){

      WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOS­ING);
      Toolkit.getDefaultToolkit().getSystemEve­ntQueue().postEvent(winClosingEvent);

}
    private int GroupSize(){
        String grade = CbGrade.getSelectedItem().toString();
        if(grade.equals("A"))
            return 16;
        else if (grade.equals("B"))
            return 37;
         else if (grade.equals("C"))
            return 80;
         else 
            return 80;
    }
    
    
       
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddClientInGroupFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddClientInGroupFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddClientInGroupFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddClientInGroupFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddClientInGroupFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddClientGMessage;
    private javax.swing.JButton AddgroupButton;
    private javax.swing.JComboBox CbGrade;
    private javax.swing.JComboBox GroupComboBox;
    private javax.swing.JTable GroupTable;
    private javax.swing.JLabel TotalInvestMent;
    private javax.swing.JButton bCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lclientId;
    private javax.swing.JLabel lclientName;
    private javax.swing.JTextField tfItemName;
    private javax.swing.JTextField tfItemPrice;
    private javax.swing.JTextField tfNumberOfIsntallments;
    // End of variables declaration//GEN-END:variables

    int Size = 0;
    int AvailableMembers = 0;
    int check =0;
    String group_Name = "";
    String grade = "";
    String InvTotal="0";
    int iDcount = 0;
    int value = 1;
    
    
}
